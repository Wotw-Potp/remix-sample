// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  name         String             @db.VarChar(20)
  password     String
  createdAt    DateTime           @default(now())
  lastLoggedAt DateTime?
  role         Role               @default(USER)
  posts        Post[]
  messages     TalkMessage[]
  rooms        UsersOnTalkRooms[]
}

enum Role {
  USER
  ADMIN
}

model Post {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  title     String
  content   String     @db.LongText
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    PostStatus @default(DRAFT)
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  deletedAt DateTime?
}

enum PostStatus {
  DRAFT
  PUBLISHED
  PRIVATE
  DELETED
}

model TalkRoom {
  id        Int                @id @default(autoincrement())
  roomId    String             @unique @default(uuid())
  messages  TalkMessage[]
  users     UsersOnTalkRooms[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  isOpened  Boolean            @default(true)
}

model TalkMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  room      TalkRoom @relation(fields: [roomId], references: [roomId], onDelete: Cascade, onUpdate: Cascade)
  roomId    String
}

model UsersOnTalkRooms {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  room   TalkRoom @relation(fields: [roomId], references: [roomId], onDelete: Cascade, onUpdate: Cascade)
  roomId String

  @@id([userId, roomId])
}
